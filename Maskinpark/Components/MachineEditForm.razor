@using Microsoft.AspNetCore.Components.Forms
@using Maskinpark.Models


    <EditForm Enhance Model="@Machine" OnValidSubmit="HandleValidSubmit" FormName="EditMachineForm" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container">
            <div class="row mb-3">
                <label for="machineName" class="col-form-label col-md-2">Machine Name: </label>
                <div class="col-md-4">
                    <InputText id="machineName" name="machineName" class="form-control col-md-4" @bind-Value="Machine.MachineName" placeholder="Enter Machine name"></InputText>
                </div>
                <ValidationMessage class="offset-md-4 col-md-4" For="@(() => Machine.MachineName)" />
            </div>

            <div class="row mb-3">
                <label for="status" class="col-form-label col-md-2">Status</label>
                <div class="col-md-4">
                    <InputRadioGroup @bind-Value="Machine.Status" Name="status">
                        @foreach (MachineStatus status in Enum.GetValues(typeof(MachineStatus)))
                        {
                            <div class="form-check">
                                <InputRadio class="form-check-input" id="status_@status.ToString()" name="status" Value="status" />
                                <label class="form-check-label" for="status_@status.ToString()">@status</label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </div>

            <div class="row mb-3">
                <label for="temperature" class="col-form-label col-md-2">Temperature</label>
                <div class="col-md-4">
                    <InputNumber id="temperature" name="temperature" class="form-control col-md-4" @bind-Value="Machine.Temperature" />
                </div>
                <ValidationMessage class="offset-md-4 col-md-4" For="@(() => Machine.Temperature)" />
            </div>

            <div class="row mb-3">
                <label for="pressure" class="col-form-label col-md-2">Pressure</label>
                <div class="col-md-4">
                    <InputNumber id="pressure" name="pressure" class="form-control col-md-4" @bind-Value="Machine.Pressure" />
                </div>
                <ValidationMessage class="offset-md-4 col-md-4" For="@(() => Machine.Pressure)" />
            </div>

            <div class="row mb-3">
                <label for="vibration" class="col-form-label col-md-2">Vibration</label>
                <div class="col-md-4">
                    <InputNumber id="vibration" name="vibration" class="form-control col-md-4" @bind-Value="Machine.Vibration" />
                </div>
                <ValidationMessage class="offset-md-4 col-md-4" For="@(() => Machine.Vibration)" />
            </div>

            <button type="submit" class="btn btn-primary">Add Machine</button>
            <button type="button" class="btn btn-light" @onclick="@NavigateToOverview">Cancel</button>
        </div>
    </EditForm>





@code {
    [Parameter]
    public Machine Machine { get; set; }

    [Parameter]
    public EventCallback<Machine> OnValidSubmit { get; set; }

    private async Task HandleValidSubmit()
    {
        if (OnValidSubmit.HasDelegate)
        {
            await OnValidSubmit.InvokeAsync(Machine);
        }
    }
    private void  HandleInvalidSubmit()
    {
        Message = "There are some validation errors. Please try again.";
    }
    private void NavigateToOverview()
    {
        NavigationManager.NavigateTo("/machineoverview");
    }
    [Parameter]
    public bool IsSaved { get; set; }

    [Parameter]
    public string Message { get; set; } = "Operation completed successfully.";

    [Inject]
    public NavigationManager NavigationManager { get; set; }
}